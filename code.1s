// Данный программный код размещен здесь под лицензией CC-BY-NC-ND.

// Суть здешних функций, это контролировать неприкосновенные запасы
// для интернет-магазина. На складе должна всегда резервироваться
// последняя штучка изделия под продажу или демонстрацию в интернет-магазине.
// Это нужно по многим причинам, которые здесь не объясняются.
// При этом, некоторые изделия могут быть перекомплектованы
// в другой артикул, и для таких изделий должна на складах
// оставаться лишь одна штучка на все возможные комплектации.
// При этом сама эта последняя штука может быть в любой из комплектаций -
// в базовой, или в той в которую в последний раз ее укомплектовали.

// Складов, на которых может осуществляться такое резервирование,
// может быть несколько (см.процедуру ПараметрСклады)

// Когда со склада происходит отгрузка, то если это отгрузка
// не на интернет-магазин, то она должна проверить, есть ли
// на складах еще хотя бы одна штучка, которая останется для интернет-магазина.

// Здесь приоритетный резерв, это то резервирование, для
// которого не осуществляется такой контроль. Это отгрузки
// на сам интернет-магазин, плюс какие-то отгрузки вручную указанные
// что это приоритетные, и плюс отгрузки на замену брака
// так же являются приоритетными.

// Часть здешних функций контролируют проведение документов,
// а часть участвуют в предварительной визуализации контроля на формах.

// И плюс процедура вт_ОстаткиДляСайта вызывается для расчета
// остатков, которые должны быть отображены на сайте.
// На сайте отображаются то, что есть на остатках,
// и плюс все возможные комплектации этих остатков.

// Данный модуль взят из рабочей конфигурации,
// и представлен здесь практически без изменений.
// Некоторые сокращения могут показаться не понятными,
// но выдерживать более расширенные названия имеет смысл
// только если этот код будет кем-то разбираться другим
// в обозримом будущем, что может быть например при командной разработке.
// Ну а в прочих ситуациях, это все равно что поддерживать не используемый код,
// который неизвестно когда еще понадобится, и понадобится ли вообще.

// Некоторые сокращения:
// ИМ - интернет-магазин
// ПП - план погрузки

//***************************************************************************
// Эти функции скопированы из глобального модуля,
// и здесь представлены скорее для большей ясности.
// Код по обозначенной выше теме располагается ниже.

Функция   ГетВремТаб(з, назв) Экспорт
	Если ТипЗнч(з) = Тип("Запрос") Тогда
		возврат ГетВремТаб(з.МенеджерВременныхТаблиц, назв);
	ИначеЕсли ТипЗнч(з) = Тип("МенеджерВременныхТаблиц") Тогда
		возврат з.Таблицы.Найти(назв).ПолучитьДанные().Выгрузить();
	КонецЕсли;
	ВызватьИсключение "НЕ МенеджерВременныхТаблиц";
КонецФункции

Функция   ГетРекв(Ссылка, рекв, ЗначПоУмолч = Неопределено) Экспорт
	Если Ссылка = Неопределено Тогда
		возврат ЗначПоУмолч;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Ссылка) и ЗначПоУмолч <> Неопределено Тогда
		возврат ЗначПоУмолч;
	КонецЕсли;
	
	рез = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, Рекв);
	Если рез = Неопределено Тогда
		рез = ЗначПоУмолч;
	КонецЕсли;
	
	возврат рез;
КонецФункции

Функция   ГетСписок(Ссылка, списокРекв) Экспорт
	возврат ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, СписокРекв);
КонецФункции

Функция   НеПуст(зн, деф) Экспорт
	Если ЗначениеЗаполнено(зн) Тогда
		возврат зн;
	КонецЕсли;
	возврат деф;
КонецФункции

Функция   НеПроводить(Отказ, тхт) Экспорт
	Отказ = Истина;
	сообщить(тхт, СтатусСообщения.Важное);
	возврат Истина;
КонецФункции

// запрос значение заполнено
Функция   гЗЗЗ(рекв, таб) Экспорт
	возврат СтрЗаменить(СтрЗаменить(
	"(ТипЗначения(%РЕКВ%) = Тип(%ТАБ%) И %РЕКВ% <> ЗНАЧЕНИЕ(%ТАБ%.ПУСТАЯССЫЛКА))"
	, "%РЕКВ%", рекв), "%ТАБ%", таб);
КонецФункции

Процедура гМвтДобавить(мвт, стру = Неопределено, тхт) Экспорт
	
	з = новый Запрос(тхт);
	з.МенеджерВременныхТаблиц = мвт;
	Если стру <> Неопределено Тогда
		Для каждого пара из стру Цикл
			з.УстановитьПараметр(пара.Ключ, пара.Значение);
		КонецЦикла;
	КонецЕсли;
	з.Выполнить();
	
КонецПроцедуры

Функция   гМвтВыполнить(мвт, стру = Неопределено, тхт) Экспорт
	з = новый Запрос(тхт);
	з.МенеджерВременныхТаблиц = мвт;
	Если стру <> Неопределено Тогда
		Для каждого пара из стру Цикл
			з.УстановитьПараметр(пара.Ключ, пара.Значение);
		КонецЦикла;
	КонецЕсли;
	возврат з.Выполнить().Выгрузить();
КонецФункции

Процедура гЗдесьЗаменить(Текст, Паттерн, Замена) Экспорт
	Текст = СтрЗаменить(Текст, Паттерн, Замена);
КонецПроцедуры

//***************************************************************************
// Дальнейшие функции относятся к обозначенной теме

Функция   ЭтоПриоритетнаяОтгрузка(док)
	// ЭтоИМ или ПриоритетнаяОтгрузка или ЭтоВозвратРемонта
	
	Если ТипЗнч(док) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		возврат ЭтоПриоритетнаяОтгрузка(док.ВнутреннийЗаказ);
		
	ИначеЕсли ТипЗнч(док) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Если ЗначениеЗаполнено(док) Тогда
			возврат ЭтоПриоритетнаяОтгрузка(ГетРекв(док, "ВнутреннийЗаказ"));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(док) = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		возврат ЭтоПриоритетнаяОтгрузка(НеПуст(док.ВнутреннийЗаказ, док.ДокументПередачи));
		
	ИначеЕсли ТипЗнч(док) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		Если ЗначениеЗаполнено(док) Тогда
			стру = ГетСписок(док, "ВнутреннийЗаказ,ДокументПередачи");
			возврат ЭтоПриоритетнаяОтгрузка(НеПуст(стру.ВнутреннийЗаказ, стру.ДокументПередачи));
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(док) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ЗначениеЗаполнено(док) Тогда
			возврат ЭтоПриоритетнаяОтгрузка(ГетРекв(док, "Сделка"));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(док) = Тип("ДокументОбъект.ВнутреннийЗаказ") Тогда
		возврат ЭтоПриоритетнаяОтгрузка(НеПуст(док.ДокОсн2, док.ДокументОснование));
	
	ИначеЕсли ТипЗнч(док) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если ЗначениеЗаполнено(док) Тогда
			стру = ГетСписок(док, "ДокОсн2,ДокументОснование");
			возврат ЭтоПриоритетнаяОтгрузка(НеПуст(стру.ДокОсн2,стру.ДокументОснование));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(док) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если ЗначениеЗаполнено(док) Тогда
			стру = ГетСписок(док, "ЭтоИнтернетМагазин,ПриоритетнаяОтгрузка");
			возврат стру.ЭтоИнтернетМагазин или стру.ПриоритетнаяОтгрузка;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(док) = Тип("ДокументСсылка.ячсмПриемкаНаРемонт") Тогда
		Если ЗначениеЗаполнено(док) Тогда
			возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	возврат Ложь;
КонецФункции

Функция   НужнаБлокировкаПоследнегоОстаткаДляИМ(
			ДокументОбъектИлиСсылка,
			СкладРасхода, СкладПолучения = Неопределено) Экспорт
	
	СкладыИМ = ПараметрыСеанса.СкладыБлокировкиПоследнегоОстаткаДляИМ;
	
	_расхСкладИМ = ЗначениеЗаполнено(СкладРасхода) И СкладыИМ.Найти(СкладРасхода) <> Неопределено;
	_прихСкладИМ = ЗначениеЗаполнено(СкладПолучения) и СкладыИМ.Найти(СкладПолучения) <> Неопределено;
	
	_ЭтоРасходСоСкладаИМ = _расхСкладИМ И НЕ _прихСкладИМ;
	
	Если НЕ _ЭтоРасходСоСкладаИМ Тогда
		возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	возврат НЕ ЭтоПриоритетнаяОтгрузка(ДокументОбъектИлиСсылка);
КонецФункции

Процедура вт_ТаблицаНоменклатуры_ВнутренниеЗаказыИзПП(мвт, ма_внзак)
	
	// исх:
	//  ВТ_НОМЕНКЛАТУРА_ВСЯ_НЕ_ГРУППИР (Ссылка,Склад,Номенклатура,...)
	//  ВТ_ТОВАРЫ_ДЛЯ_КОНТРОЛЯ (Номенклатура,Количество)
	
	стру = новый Структура;
	стру.Вставить("СписокВнутреннихЗаказов", ма_внзак);
	стру.Вставить("СкладыИМ", ПараметрыСеанса.СкладыБлокировкиПоследнегоОстаткаДляИМ);
	
	тхт = "
	
	//**************************************
	|выбрать
	|	тЗ.Ссылка
	|поместить
	|	ВТ_ВНЗАК_УМЕНЬШАЮЩИЕ_ИМ
	|из
	|	Документ.ВнутреннийЗаказ как тЗ
	|	левое соединение
	|	РегистрСведений.ячсмСостоянияВнутреннегоЗаказа как тС
	|	по тЗ.Ссылка = тС.Ссылка
	|где
	|	тЗ.Ссылка в (&СписокВнутреннихЗаказов)
	|	И (
	|		тЗ.Склад в (&СкладыИМ)
	|		И НЕ тЗ.СкладПолучатель в (&СкладыИМ)
	|	)
	|	и тС.Состояние <> значение(Перечисление.СостоянияВнутреннихЗаказов.Отгружено);
	
	//**************************************
	|выбрать
	|	Ссылка
	|поместить
	|	ВТ_ВНЗАК_УМЕНЬШАЮЩИЕ_ПРИОРИТЕТНЫЕ
	|из
	|	Документ.ВнутреннийЗаказ
	|где
	|	Ссылка в (выбрать * из ВТ_ВНЗАК_УМЕНЬШАЮЩИЕ_ИМ)
	|	И (
	|		выразить(ДокОсн2 как Документ.ЗаказПокупателя).ЭтоИнтернетМагазин
	|		или
	|		выразить(ДокОсн2 как Документ.ЗаказПокупателя).ПриоритетнаяОтгрузка
	|		или
	|		"+гЗЗЗ("ДокОсн2", "Документ.ячсмПриемкаНаРемонт")+"
	|	);
	
	//**************************************
	|выбрать
	|	т.Ссылка как ВнутреннийЗаказ,
	|	т.Ссылка.Склад,
	|	т.Номенклатура,
	|	т.Количество * т.Коэффициент как Количество,
	
	|	IsNull(т.Номенклатура.БесцветноеИзделие.ид_сайта,0) > 0
	|	и т.Ссылка в (выбрать * из ВТ_ВНЗАК_УМЕНЬШАЮЩИЕ_ИМ)
	|	и НЕ т.Ссылка в (выбрать * из ВТ_ВНЗАК_УМЕНЬШАЮЩИЕ_ПРИОРИТЕТНЫЕ)
	|		как СчитатьКонтрольИМ
	
	|поместить
	|	ВТ_НОМЕНКЛАТУРА_ВСЯ_НЕ_ГРУППИР
	|из
	|	Документ.ВнутреннийЗаказ.Товары как т
	|где
	|	т.Ссылка в (&СписокВнутреннихЗаказов);
	
	//**************************************
	|выбрать
	|	Номенклатура,
	|	Сумма(Количество)
	|поместить
	|	ВТ_ТОВАРЫ_ДЛЯ_КОНТРОЛЯ
	|из
	|	ВТ_НОМЕНКЛАТУРА_ВСЯ_НЕ_ГРУППИР
	|где
	|	СчитатьКонтрольИМ
	|сгруппировать по
	|	Номенклатура;
	
	//**************************************
	|уничтожить ВТ_ВНЗАК_УМЕНЬШАЮЩИЕ_ИМ;
	|уничтожить ВТ_ВНЗАК_УМЕНЬШАЮЩИЕ_ПРИОРИТЕТНЫЕ;";
	
	гМвтДобавить(мвт, стру, тхт);
КонецПроцедуры

Процедура вт_ТаблицаНоменклатуры_Отгрузка(мвт, ссылка)
	// &Ссылка - РасходныйОрдерНаТовары или ПеремещениеТоваров
	
	// исх:
	//   ВТ_ТОВАРЫ_ДЛЯ_КОНТРОЛЯ
	
	тхт = "

	//******************************************************
	|выбрать
	|	тДок.Номенклатура,
	|	тДок.Количество * тДок.Коэффициент как Количество
	|поместить
	|	ВТ_ИСХОДНАЯ_ТАБЛИЦА_ДОКУМЕНТА
	|из
	|	Документ.РасходныйОрдерНаТовары.Товары как тДок
	|где
	|	Ссылка = &Ссылка

	|объединить все выбрать
	|	тДок.Номенклатура,
	|	тДок.Количество * тДок.Коэффициент как Количество
	|из
	|	Документ.ПеремещениеТоваров.Товары как тДок
	|где
	|	Ссылка = &Ссылка
	|	;

	//******************************************************
	// таблица для контроля количества - отобрана Номенклатура для ИМ и все это свернуто
	|выбрать
	|	Номенклатура,
	|	Сумма(Количество)
	|поместить
	|	ВТ_ТОВАРЫ_ДЛЯ_КОНТРОЛЯ
	|из
	|	ВТ_ИСХОДНАЯ_ТАБЛИЦА_ДОКУМЕНТА
	|где
	|	IsNull(Номенклатура.БесцветноеИзделие.ид_сайта,0) > 0
	|сгруппировать по
	|	Номенклатура;";
	
	гМвтДобавить(мвт, новый Структура("Ссылка", ссылка), тхт);
КонецПроцедуры

Процедура вт_ТаблицыСвертки(мвт, вт_отбор)
	
	// вх: ВТ_ТОВАРЫ_ДЛЯ_КОНТРОЛЯ (Номенклатура,Количество) (Номенкл уникальна)
	// исх:
	//  ВТ_ТАБЛИЦА_СВЕРТКИ_ДОКА (НоменклатураДокумента,БазоваяНоменклатура,Количество)
	//  ВТ_БАЗОВЫЕ_ОТ_ДОКА (Номенклатура,Количество)
	//  ВТ_ТАБЛИЦА_СВЕРТКИ_ОСТАТКОВ (НоменклатураОстатка,БазоваяНоменклатура)
	
	тхт = "
	
	//******************************************************
	|выбрать
	|	тДок.Номенклатура как НоменклатураДокумента,
	|	тДок.Количество,
	|	IsNull(тПере.ИсходнаяНоменклатура,тДок.Номенклатура) как БазоваяНоменклатура
	|поместить
	|	ВТ_ТАБЛИЦА_СВЕРТКИ_ДОКА
	|из
	|	ВТ_ТОВАРЫ_ДЛЯ_КОНТРОЛЯ как тДок
	|		левое соединение
	|	РегистрСведений.ячсмТаблицаПереупаковки как тПере
	|	по тДок.Номенклатура = тПере.УпакованнаяНоменклатура
	|	и тПере.ДоступноДляПереупаковкиДляИМ;

	//******************************************************
	|выбрать
	|	БазоваяНоменклатура как Номенклатура,
	|	сумма(Количество)
	|поместить
	|	ВТ_БАЗОВЫЕ_ОТ_ДОКА
	|из
	|	ВТ_ТАБЛИЦА_СВЕРТКИ_ДОКА
	|сгруппировать по
	|	БазоваяНоменклатура;

	//******************************************************
	//******************************************************
	//******************************************************
	|выбрать различные
	|	IsNull(тБаз2.Номенклатура,
	|		IsNull(тПере.УпакованнаяНоменклатура,тБаз.Номенклатура)
	|	) как Номенклатура
	|поместить
	|	ВТ_НОМЕНКЛАТУРА_РАЗВЕРНУТО
	|из
	|	ВТ_БАЗОВЫЕ_ОТ_ДОКА как тБаз
	|		левое соединение
	|	РегистрСведений.ячсмТаблицаПереупаковки как тПере
	|	по тБаз.Номенклатура = тПере.ИсходнаяНоменклатура
	|	и тПере.ДоступноДляПереупаковкиДляИМ
	|		полное соединение
	|	ВТ_БАЗОВЫЕ_ОТ_ДОКА как тБаз2
	|	по ложь;

	//******************************************************
	|выбрать
	|	тОтб.Номенклатура как НоменклатураОстатка,
	|	IsNull(тПере.ИсходнаяНоменклатура,тОтб.Номенклатура) как БазоваяНоменклатура
	|поместить
	|	ВТ_ТАБЛИЦА_СВЕРТКИ_ОСТАТКОВ
	|из
	|	ВТ_НОМЕНКЛАТУРА_РАЗВЕРНУТО как тОтб
	|		левое соединение
	|	РегистрСведений.ячсмТаблицаПереупаковки как тПере
	|	по тОтб.Номенклатура = тПере.УпакованнаяНоменклатура
	|	и тПере.ДоступноДляПереупаковкиДляИМ;

	//******************************************************
	|выбрать различные
	|	БазоваяНоменклатура как Номенклатура
	|поместить
	|	ВТ_БАЗОВЫЕ_ОТ_ОСТАТКОВ__ДЛЯ_ОТЛАДКИ
	|из
	|	ВТ_ТАБЛИЦА_СВЕРТКИ_ОСТАТКОВ;
	
	|выбрать
	|	т1.к, т2.к, т3.к, т4.к, т5.к, т6.к
	|поместить
	|	ВТ_ОТЛАДКА
	|из
	|	(выбрать количество(*) как к из ВТ_БАЗОВЫЕ_ОТ_ДОКА) как т1
	|		левое соединение
	|	(выбрать количество(*) как к из ВТ_БАЗОВЫЕ_ОТ_ОСТАТКОВ__ДЛЯ_ОТЛАДКИ) как т2
	|		по истина левое соединение
	
	|	(выбрать количество(*) как к из ВТ_ТАБЛИЦА_СВЕРТКИ_ДОКА) как т3
	|		по истина левое соединение
	|	(выбрать количество(*) как к из ВТ_ТОВАРЫ_ДЛЯ_КОНТРОЛЯ) как т4
	|		по истина левое соединение
	
	|	(выбрать количество(*) как к из ВТ_ТАБЛИЦА_СВЕРТКИ_ОСТАТКОВ) как т5
	|		по истина левое соединение
	|	(выбрать количество(*) как к из ВТ_НОМЕНКЛАТУРА_РАЗВЕРНУТО) как т6
	|		по истина
	|;
	
	|уничтожить ВТ_БАЗОВЫЕ_ОТ_ОСТАТКОВ__ДЛЯ_ОТЛАДКИ;
	|уничтожить ВТ_НОМЕНКЛАТУРА_РАЗВЕРНУТО;
	|	
	|";
	
	гЗдесьЗаменить(тхт, "ВТ_ТОВАРЫ_ДЛЯ_КОНТРОЛЯ", вт_отбор);
	
	гМвтДобавить(мвт, , тхт);
	
	т = ГетВремТаб(мвт, "ВТ_ОТЛАДКА");
	ст = т.Получить(0);
	
	не_о1 = ст.Получить(0) = ст.Получить(1);
	не_о2 = ст.Получить(2) = ст.Получить(3);
	не_о3 = ст.Получить(4) = ст.Получить(5);
	
	Если не не_о1 или не не_о2 или не не_о3 Тогда
		сообщить("ВАЖНО: ОШИБКА РАСЧЕТА БАЗОВЫХ ИЗДЕЛИЙ: " +
		не_о1 + ", " + не_о2 + ", " + не_о3,
		СтатусСообщения.ОченьВажное);
	КонецЕсли;
КонецПроцедуры

Процедура ПараметрСклады(з, ма_склады)
	Если ма_склады = Неопределено Тогда
		з.УстановитьПараметр("СкладыИМ", ПараметрыСеанса.СкладыБлокировкиПоследнегоОстаткаДляИМ);
	Иначе
		з.УстановитьПараметр("СкладыИМ", ма_склады);
	КонецЕсли;
КонецПроцедуры

Процедура вт_ПриоритетныйРезерв(мвт, вт_отбор, ма_склады = Неопределено)

// Здесь рассчитываемая таблица могла бы быть
// посчитана по более правильным правилам,
// с использованием регистра остатков.
// Но данный предварительный вариант оказался достаточным
// ДЛЯ РУКОВОДСТВА по производительности,
// и поэтому остался в таком не оптимизированном виде.
	
	// ВТ_ОТБОР_НОМЕНКЛАТУРА_ДЛЯ_КОНТРОЛЯ_ИМ
	//  должна иметь уникальную колонку Номенклатура
	
	з = новый Запрос;
	з.МенеджерВременныхТаблиц = мвт;
	ПараметрСклады(з, ма_склады);
	
	срок_резерва = МойМдл.РеквизитНастройки("КоличествоДнейДляНеОтгруженныхЗаказовКакСтатусРезерва");
	Если срок_резерва = 0 Тогда
		сообщить("НЕ УСТАНОВЛЕН СРОК ДЛЯ ЗАКАЗОВ ВЫСТУПАЮЩИХ КАК РЕЗЕРВ");
	КонецЕсли;
	з.УстановитьПараметр("ДатаНачалаРезерва", НачалоДня(ТекущаяДата()) - срок_резерва * 24*60*60);
	
	тхт = "
	
	|выбрать
	|	тН.Номенклатура,
	|	тН.Количество как Количество
	
	|поместить
	|	ВТ_ПРИОРИТЕТНЫЙ_РЕЗЕРВ_НЕ_ГРУППИР
	|из
	|	Документ.ЗаказПокупателя.ячсмСоставНабора как тН
	
	|	внутреннее соединение
	|	Документ.ЗаказПокупателя как тЗ
	|	по тН.Ссылка = тЗ.Ссылка
	
	|	внутреннее соединение
	|	ВТ_ОТБОР_НОМЕНКЛАТУРА как тОтб
	|	по тН.Номенклатура = тОтб.Номенклатура
	
	|	левое соединение
	|	РегистрСведений.ячсмСостоянияЗаказаПокупателя как тС
	|	по тЗ.Ссылка = тС.Ссылка
	
	|где
	|	(тЗ.ЭтоИнтернетМагазин или тЗ.ПриоритетнаяОтгрузка)
	|	и тЗ.Проведен
	|	и тС.Состояние <> значение(Перечисление.СостоянияЗаказовПокупателей.Отгружено)
	|	и тЗ.Дата >= &ДатаНачалаРезерва
	//|	и IsNull(тН.Номенклатура.БесцветноеИзделие.ид_сайта,0) > 0
	
	|объединить все
	|выбрать
	|	тН.Номенклатура,
	|	тН.Количество * тН.Коэффициент как Количество
	|из
	|	Документ.ВнутреннийЗаказ.Товары как тН
	
	|	внутреннее соединение
	|	Документ.ВнутреннийЗаказ как тЗ
	|	по тН.Ссылка = тЗ.Ссылка
	
	|	внутреннее соединение
	|	ВТ_ОТБОР_НОМЕНКЛАТУРА как тОтб
	|	по тН.Номенклатура = тОтб.Номенклатура
	
	|	левое соединение
	|	РегистрСведений.ячсмСостоянияВнутреннегоЗаказа как тС
	|	по тЗ.Ссылка = тС.Ссылка
	
	|где
	|	тЗ.Проведен
	|	и тС.Состояние <> значение(Перечисление.СостоянияВнутреннихЗаказов.Отгружено)
	|	и тЗ.Дата >= &ДатаНачалаРезерва
	//|	и IsNull(тН.Номенклатура.БесцветноеИзделие.ид_сайта,0) > 0
	|	и "+гЗЗЗ("тЗ.ДокОсн2", "Документ.ячсмПриемкаНаРемонт")+"
	|	и тЗ.Склад в (&СкладыИМ)
	|	и НЕ тЗ.СкладПолучатель в (&СкладыИМ)
	|;
	
	|выбрать
	|	Номенклатура,
	|	Сумма(Количество)
	|поместить ВТ_ПРИОРИТЕТНЫЙ_РЕЗЕРВ
	|из ВТ_ПРИОРИТЕТНЫЙ_РЕЗЕРВ_НЕ_ГРУППИР
	|сгруппировать по
	|	Номенклатура;
	
	|уничтожить ВТ_ПРИОРИТЕТНЫЙ_РЕЗЕРВ_НЕ_ГРУППИР;
	|";
	
	гЗдесьЗаменить(тхт, "ВТ_ОТБОР_НОМЕНКЛАТУРА", вт_отбор);
	з.Текст = тхт;
	з.Выполнить();
КонецПроцедуры

Процедура вт_ОстаткиИМ(мвт, вт_отбор, ма_склады = Неопределено)
	
	// ВТ_ОТБОР_НОМЕНКЛАТУРА_ДЛЯ_КОНТРОЛЯ_ИМ
	//  должна иметь уникальную колонку Номенклатура
	
	з = новый Запрос;
	з.МенеджерВременныхТаблиц = мвт;
	ПараметрСклады(з, ма_склады);
	
	тхт = "
	|выбрать
	|	тОст.Номенклатура,
	|	тОст.КоличествоОстаток как Количество
	|поместить ВТ_ОСТАТОК_НА_СКЛАДАХ_ИМ
	|из
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(,
	|		Склад В (&СкладыИМ)
	|		И Номенклатура В (выбрать Номенклатура из ВТ_ОТБОР_НОМЕНКЛАТУРА)
	|	) КАК тОст;";
	
	гЗдесьЗаменить(тхт, "ВТ_ОТБОР_НОМЕНКЛАТУРА", вт_отбор);
	з.Текст = тхт;
	з.Выполнить();
КонецПроцедуры

Процедура вт_ОстаткиДляСайта(мвт, вт_отбор, ма_склады) Экспорт
	
	вт_ОстаткиИМ(мвт, вт_отбор, ма_склады);
	вт_ПриоритетныйРезерв(мвт, вт_отбор, ма_склады);
	
	тхт = "
	
	//******************************************************************
	|выбрать
	|	Номенклатура,
	|	сумма(Количество)
	|поместить
	|	ВТ_РЕАЛ_ОСТАТКИ
	|из (
		|выбрать
		|	Номенклатура,
		|	Количество
		|из
		|	ВТ_ОСТАТОК_НА_СКЛАДАХ_ИМ
		
		|объединить все выбрать
		|	Номенклатура,
		|	-Количество
		|из
		|	ВТ_ПРИОРИТЕТНЫЙ_РЕЗЕРВ
	|	) как т
	|сгруппировать по
	|	Номенклатура
	|имеющие
	|	сумма(Количество) > 0
	|индексировать по
	|	Номенклатура;
	
	//******************************************************************
	|выбрать
	|	Номенклатура,
	|	сумма(Количество)
	|поместить
	|	ВТ_БАЗОВЫЕ_ОСТАТКИ
	|из (
		|выбрать
		|	IsNull(тПере.ИсходнаяНоменклатура,тОст.Номенклатура) как Номенклатура,
		|	тОст.Количество
		|из
		|	ВТ_РЕАЛ_ОСТАТКИ как тОст
		|		левое соединение
		|	РегистрСведений.ячсмТаблицаПереупаковки как тПере
		|	по тОст.Номенклатура = тПере.УпакованнаяНоменклатура
		|	и тПере.ДоступноДляПереупаковкиДляИМ
	|	) как т
	|сгруппировать по
	|	Номенклатура;
	
	//******************************************************************
	|выбрать
	|	Номенклатура,
	|	Номенклатура.БесцветноеИзделие как БесцветноеИзделие,
	|	Количество
	|поместить
	|	ВТ_ОСТАТКИ
	|из (
		|выбрать различные
		|	IsNull(тБаз.Номенклатура,
		|		IsNull(тПере.УпакованнаяНоменклатура, тОст.Номенклатура)
		|	) как Номенклатура,
		|	IsNull(тБаз.Количество, тОст.Количество) как Количество
		|из
		|	ВТ_БАЗОВЫЕ_ОСТАТКИ как тОст
		|		внутреннее соединение
		|	РегистрСведений.ячсмТаблицаПереупаковки как тПере
		|	по тОст.Номенклатура = тПере.ИсходнаяНоменклатура
		|	и тПере.ДоступноДляПереупаковкиДляИМ
		|	и тПере.ИсходнаяНоменклатура <> тПере.УпакованнаяНоменклатура
		|		полное соединение
		|	ВТ_БАЗОВЫЕ_ОСТАТКИ как тБаз
		|	по ложь
	|	) как т
	
	|";
	
	гМвтДобавить(мвт, , тхт);
КонецПроцедуры

Процедура вт_РассчитатьКонтрольИМ(мвт, вт_отбор, вт_рез) Экспорт
	
	вт_ТаблицыСвертки(мвт, вт_отбор);
	
	гМвтДобавить(мвт, , 
	"выбрать различные
	|	НоменклатураОстатка как Номенклатура
	|поместить
	|	ВТ_ОТБОР_НОМЕНКЛАТУРА_ОСТАТКОВ
	|из
	|	ВТ_ТАБЛИЦА_СВЕРТКИ_ОСТАТКОВ");
	
	вт_ОстаткиИМ(мвт, "ВТ_ОТБОР_НОМЕНКЛАТУРА_ОСТАТКОВ");
	вт_ПриоритетныйРезерв(мвт, "ВТ_ОТБОР_НОМЕНКЛАТУРА_ОСТАТКОВ");
	
	тхт = "
	|выбрать
	|	тОтб.БазоваяНоменклатура,
	|	Сумма(IsNull(тОст.Количество,0)) как Остаток,
	|	Сумма(IsNull(тРез.Количество,0)) как Резерв
	|поместить
	|	ВТ_ОСТАТКИ_И_РЕЗЕРВЫ
	|из
	|	ВТ_ТАБЛИЦА_СВЕРТКИ_ОСТАТКОВ как тОтб
	|		левое соединение
	|	ВТ_ОСТАТОК_НА_СКЛАДАХ_ИМ как тОст
	|	по тОтб.НоменклатураОстатка = тОст.Номенклатура
	|		левое соединение
	|	ВТ_ПРИОРИТЕТНЫЙ_РЕЗЕРВ как тРез
	|	по тОтб.НоменклатураОстатка = тРез.Номенклатура
	|сгруппировать по
	|	тОтб.БазоваяНоменклатура;
	
	|выбрать
	|	тДок.Номенклатура,
	|	тДок.Количество как КоличествоВДокументе,
	|	IsNull(тОст.Остаток,0) как КоличествоОстаток,
	|	IsNull(тОст.Резерв,0) как КоличествоПриоритетныйРезерв,
	|
	|	выбор когда тБесцв.КоличествоРезерваДляИМ есть NULL Тогда
	|		1
	|	когда тБесцв.КоличествоРезерваДляИМ = 0 Тогда
	|		1
	|	иначе
	|		тБесцв.КоличествоРезерваДляИМ
	|	конец как КоличествоРезерваДляИМ
	|
	|поместить
	|	ВТ_ПРЕДВАРИТЕЛЬНЫЙ_РЕЗУЛЬТАТ
	|из
	|	ВТ_БАЗОВЫЕ_ОТ_ДОКА как тДок
	|		левое соединение
	|	ВТ_ОСТАТКИ_И_РЕЗЕРВЫ как тОст
	|	по тДок.Номенклатура = тОст.БазоваяНоменклатура
	|		левое соединение
	|	Справочник.БесцветныеИзделия как тБесцв
	|	по тДок.Номенклатура.БесцветноеИзделие = тБесцв.Ссылка
	|;
	
	|выбрать
	|	*,
	|	выбор когда КоличествоВДокументе = 0 Тогда
	|		Ложь
	|	когда КоличествоВДокументе < 0 Тогда
	|		Истина
	|	Иначе
	|		КоличествоОстаток <
	|		КоличествоВДокументе + КоличествоПриоритетныйРезерв + КоличествоРезерваДляИМ
	|	Конец как ЕстьОшибка
	|поместить
	|	ВТ_РЕЗУЛЬТАТ
	|из
	|	ВТ_ПРЕДВАРИТЕЛЬНЫЙ_РЕЗУЛЬТАТ;
	|";
	
	гЗдесьЗаменить(тхт, "ВТ_РЕЗУЛЬТАТ", вт_рез);
	
	гМвтДобавить(мвт,,тхт);
КонецПроцедуры

Процедура РассчитатьКонтрольИМ_Отгрузка(Отказ, ДокументОбъект) Экспорт
	
	скл = Неопределено;
	склПолуч = Неопределено;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		скл = ДокументОбъект.СкладОтправитель;
		склПолуч = ДокументОбъект.СкладПолучатель;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		скл = ДокументОбъект.Склад;
	КонецЕсли;
	
	Если НЕ НужнаБлокировкаПоследнегоОстаткаДляИМ(ДокументОбъект, скл, склПолуч) Тогда
		возврат;
	КонецЕсли;
	
	мвт = новый МенеджерВременныхТаблиц;
	
	вт_ТаблицаНоменклатуры_Отгрузка(мвт, ДокументОбъект.ссылка);
	вт_РассчитатьКонтрольИМ(мвт, "ВТ_ТОВАРЫ_ДЛЯ_КОНТРОЛЯ", "ВТ_ПРЕ_РЕЗ");
	
	тРез = гМвтВыполнить(мвт, ,
	"выбрать
	|	*
	|из
	|	ВТ_ПРЕ_РЕЗ
	|упорядочить по
	|	Номенклатура
	|автоупорядочивание");
	
	Для каждого ст из тРез Цикл
		
		//сообщить(
		//"ОТЛАДКА " + ст.Номенклатура +
		//" по контролю остатков для ИМ, нужно: "+ст.КоличествоВДокументе+
		//", ост: " + ст.КоличествоОстаток +
		//", приор.резерв: " + ст.КоличествоПриоритетныйРезерв +
		//", резерв ИМ: " + ст.КоличествоРезерваДляИМ);
		
		Если ст.ЕстьОшибка Тогда
			НеПроводить(Отказ,
			"Контроль резерва ИМ, не хватает: " + ст.Номенклатура +
			", нужно: "+ст.КоличествоВДокументе+
			", ост: " + ст.КоличествоОстаток +
			", приор.резерв: " + ст.КоличествоПриоритетныйРезерв +
			", резерв ИМ: " + ст.КоличествоРезерваДляИМ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция   РассчитатьКонтрольИМ_ПП(ма_внзак) Экспорт
	
	мвт = новый МенеджерВременныхТаблиц;
	вт_ТаблицаНоменклатуры_ВнутренниеЗаказыИзПП(мвт, ма_внзак);
	вт_РассчитатьКонтрольИМ(мвт, "ВТ_ТОВАРЫ_ДЛЯ_КОНТРОЛЯ", "ВТ_ПРЕ_РЕЗ");
	
	тРез =
	гМвтВыполнить(мвт, , 
	"выбрать
	|	т.ВнутреннийЗаказ,
	|	т.Номенклатура,
	|	т.Количество,
	|	IsNull(тРез.КоличествоВДокументе,0) как Контроль_КоличествоВДокументе,
	|	IsNull(тРез.КоличествоРезерваДляИМ,0) как Контроль_КоличествоРезерваДляИМ,
	|	IsNull(тРез.КоличествоОстаток,0) как Контроль_КоличествоОстаток,
	|	IsNull(тРез.КоличествоПриоритетныйРезерв,0) как Контроль_КоличествоПриоритетныйРезерв,
	|	IsNull(тРез.ЕстьОшибка,Ложь) как Контроль_ЕстьОшибка
	|из
	|	ВТ_НОМЕНКЛАТУРА_ВСЯ_НЕ_ГРУППИР как т
	|		левое соединение
	|	ВТ_ТАБЛИЦА_СВЕРТКИ_ДОКА как тСверт
	|	по т.Номенклатура = тСверт.НоменклатураДокумента
	|	и т.СчитатьКонтрольИМ
	|		левое соединение
	|	ВТ_ПРЕ_РЕЗ как тРез
	|	по тСверт.БазоваяНоменклатура = тРез.Номенклатура
	|упорядочить по
	|	т.Номенклатура, т.ВнутреннийЗаказ
	|автоупорядочивание");
	
	возврат тРез;
КонецФункции

